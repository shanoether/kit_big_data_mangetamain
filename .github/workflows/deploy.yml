name: Build & Deploy to VM

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main ]

jobs:
  build-deploy:
    environment: vm-kit-big-data-1        # <- if you use GitHub Environments
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute tags
        id: meta
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "IMAGE=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-app" >> $GITHUB_OUTPUT

      - name: Login to GHCR (push)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build image
        run: |
          docker build --pull -t ${{ steps.meta.outputs.IMAGE }}:latest \
                       -t ${{ steps.meta.outputs.IMAGE }}:sha-${{ steps.meta.outputs.SHORT_SHA }} .

      - name: Push image
        run: |
          docker push ${{ steps.meta.outputs.IMAGE }}:latest
          docker push ${{ steps.meta.outputs.IMAGE }}:sha-${{ steps.meta.outputs.SHORT_SHA }}

      - name: Deploy on VM
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: GHCR_PAT,GH_ACTOR,IMAGE,SHORT_SHA
          script: |
            set -euo pipefail
            export GH_ACTOR="${{ github.actor }}"
            export GHCR_PAT="${{ secrets.GHCR_PAT }}"
            export IMAGE="${{ steps.meta.outputs.IMAGE }}"
            export SHORT_SHA="${{ steps.meta.outputs.SHORT_SHA }}"
            export GH_USER="${{ github.repository_owner }}"
            export REPO="${{ github.event.repository.name }}"
            export APP_DIR="/opt/app"

            cd "$APP_DIR"
            git pull

            # Ephemeral login to GHCR
            TMP_DOCKER_CONFIG="$(mktemp -d)"
            export DOCKER_CONFIG="$TMP_DOCKER_CONFIG"

            echo "$GHCR_PAT" | docker login ghcr.io -u "$GH_ACTOR" --password-stdin
            docker compose pull
            docker compose up -d --remove-orphans


            # Pin the deployment to the new immutable tag
            PREV_TAG="$(sed -n 's/^IMAGE_TAG=//p' .env || true)"

            export IMAGE_TAG="sha-${SHORT_SHA}"
            echo "IMAGE_TAG=${IMAGE_TAG}" > .env

            # Pull & restart
            echo ghcr.io/${GH_USER}/${REPO}-app:${IMAGE_TAG}
            docker compose pull
            docker compose up -d --remove-orphans

            # probe health check
            # probe health (retry ~90s)

            sleep 10  # wait a bit for the healthcheck to start
            ok=0
            STREAMLIT_CID="$(docker compose ps -q streamlit || true)"
            if [ -z "$STREAMLIT_CID" ]; then
                echo "streamlit container not found"
                exit 1
            fi

            for i in $(seq 1 18); do
                if docker inspect --format='{{.State.Health.Status}}' "$STREAMLIT_CID" 2>/dev/null | grep -q healthy; then
                    ok=1; break
                fi
                sleep 5
            done

            if [ "$ok" -ne 1 ]; then
                echo "❌ New version unhealthy, rolling back to ${PREV_TAG:-<none>}"
                if [ -n "${PREV_TAG:-}" ]; then
                    echo "IMAGE_TAG=${PREV_TAG}" > .env
                    docker compose pull
                    docker compose up -d --remove-orphans
                else
                    echo "No previous tag to roll back to."
                    exit 1
                fi
            else
                echo "✅ New version healthy: ${IMAGE_TAG}"
            fi

            docker logout ghcr.io || true

            rm -rf "$TMP_DOCKER_CONFIG"
            unset DOCKER_CONFIG
