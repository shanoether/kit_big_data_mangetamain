[project]
name = "kit-big-data"
version = "0.1.0"
description = "Kit big data mangetamain project"
readme = "README.md"
requires-python = ">=3.12"
license = { text = "MIT" }
keywords = []
authors = [
    { name = "Le Hoang", email = "lehoangnguyen510@gmail.com" },
    { name = "longhorncow", email = "crux.pride2579@eagereverest.com" },

]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "requests",
    "pandas",
    "numpy",
    "matplotlib",
    "seaborn",
    "scipy",
    "scikit-learn",
    "plotly",
    "polars",
    "streamlit",
    "pre-commit>=4.3.0",
    "pyment>=0.3.3",
    "spacy>=3.8.7",
    "matplotlib-venn>=1.1.2",
    "wordcloud>=1.9.4",
    "pip",
    "hatch",
    "streamlit-extras",
    "coverage>=7.11.0",
    "pytest-cov>=7.0.0",
    "inflect>=7.5.0",
]


[dependency-groups]
dev = [
    "ruff>=0.8.4",
    "mypy>=1.13.0",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "coverage>=7.6.9",
    "ipykernel>=6.29.5",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.47",
    "mkdocstrings[python]>=0.27.0",
    "mkdocs-autorefs>=1.2.0",
    "mkdocs-git-revision-date-localized-plugin>=1.3.0",
    "mkdocs-include-markdown-plugin>=7.2.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
    "pre-commit>=4.0.1",
    "pyment>=0.3.3",
    "py-spy>=0.4.1",
    "interrogate>=1.7.0",
]

jupyter = [
  "jupyter",
  "jupyterlab",
  "jupyterlab-lsp",
  "python-lsp-server",
  "jupyterlab-git",
  "ipywidgets",
  "ipympl",
  "jupytext",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.env]
installer = "uv"

[tool.hatch.envs.dev]
dependencies = [] # Let uv resolve; weâ€™ll still use hatch to orchestrate commands

[tool.hatch.envs.dev.scripts]
lint = "ruff check ."
format = "ruff format . && black ."
types = "mypy src"
docs-cov = "interrogate -c pyproject.toml"

# To build the library in wheel. - example
[tool.hatch.build.targets.wheel]
packages = ["src/mangetamain"]
include = ["src/mangetamain/**/*"]

[tool.hatch.envs.default.scripts]
httphello = "src.mypkg.httphello:httphello"


# Mkdocs Docs e
[tool.hatch.envs.docs]
dependencies = []
[tool.hatch.envs.docs.scripts]
serve = "mkdocs serve -a 127.0.0.1:8000"
build = "mkdocs build --strict"
deploy = "mkdocs gh-deploy --force"

# Configuration pytest
[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--import-mode=append",
    "-v"
]
filterwarnings = [
    "ignore::DeprecationWarning:weasel.util.config",
    "ignore::DeprecationWarning:click.parser",
    "ignore::DeprecationWarning:spacy.cli._util",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

# Configuration coverage
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "src/mangetamain/frontend/pages/recipe_analyzer.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 90


# Configuration ruff
[tool.ruff]
target-version = "py312"
src = ["src", "tests", "main.py"]
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "D",  #. pydoc style via Ruff
    "ANN", # Annotation
    "C4", # flake8-comprehensions
    "COM", # flake8 comments
    "PL", # pylint like
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    #"TCH", # flake8-type-checking
    "PIE", # flake8-pie
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RUF", # Ruff-specific rules
    "W191", # indentation contains tabs
    "W291", # trailing whitespace at end of line
]

ignore = [
    "COM812",
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "B904", # Allow `raise` without `from` inside `except`
    # Allow module-level dunder docstrings to be missing if you wish:
    # "D104",
    # "D105",
    # "D107",
]

exclude = [
  ".git",
  ".venv",
  "build",
  "dist",
  "notebook",
  "notebook/*",
  "notebook/**/*",
  "lib",
  "src/mypkg",
  "src/utils",
  "src/archive",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "S101", "PLR2004", "SLF001"]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"

# Configuration black
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Configuration isort
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

# Configuration mypy
[tool.mypy]
python_version = "3.12"
strict = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.interrogate]
paths = ["src", "tests"]
fail-under = 80 # required % docstring coverage
exclude = ["src/utils","src/mypkg","notebook","src/archive"]
verbose = 3
